import os
import json
import logging

import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def split_at(s, c, n):
    words = s.split(c)
    return c.join(words[:n]), c.join(words[n:])



def create_name(tmp_file='',name='test', version=1):
    """
    :param
        tmp_file
    :return  name_date_version.ext:
    """
    ext = os.path.splitext(tmp_file)[1][1:]
    p_version = '{:03d}'.format(version)
    name = '{0}_{1}_{2}.{3}'.format(name, datetime.datetime.now().strftime("%y%m%d%H%M%S"), p_version, ext)
    logger.info('Return result: {0}'.format(name))
    return name




def add_version(file='name_with_multi_underscore_hash_001.tst'):
    """

    :param
        filename that already was generated by sbrys:
    :return new filenme string:

    toDo find more elegant function
    """
    full_name, ext = (os.path.splitext(file))
    name, data = split_at(full_name, '_', -2)
    hash, version = data.split('_')
    version_up = '{:03d}'.format(int(version)+1)
    new_name = '{0}_{1}_{2}{3}'.format(name, hash, version_up, ext)
    logger.info('Return result: {0}'.format(new_name))
    return new_name



def create_db_entry():
    """

    :return:
    """
    pass



def create_sidecar_file(**kwargs):
    """
    create Json based Sidecar File

    :return:
    """
    pass


def save_file():
    """
    save File to folder create sidecar File and create DB entry
    :return:

    """
    pass




if __name__ == '__main__':
    pass
    # import tempfile
    # temp_file = tempfile.NamedTemporaryFile(suffix='.tst')
    # print temp_file.name
    # print create_name(tmp_file='/test.tst')#temp_file.name
    # print add_version()