import os
import json
import logging
import shutil
import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



def create_dir_dict():
    """
    dict with full path working dirs

    :return:  dict filed with working directorys
    """
    dir_dict = {}
    dir_dict['root'] = os.getcwd()
    dir_dict['tmp'] = os.path.join(dir_dict['root'], 'tmp')
    dir_dict['collection'] = os.path.join(dir_dict['root'], 'collection')
    dir_dict['wait'] = os.path.join(dir_dict['root'], 'wait')
    logger.info('Return result: {0}'.format(dir_dict))
    return dir_dict






def split_at(s, c, n):
    words = s.split(c)
    return c.join(words[:n]), c.join(words[n:])


def create_name(tmp_file='',name='test', version=1):
    """
    create sbrys file string
    :param
        tmp_file
    :return  str name_date_version.ext:
    """
    ext = os.path.splitext(tmp_file)[1][1:]
    p_version = '{:03d}'.format(version)
    name = '{0}_{1}_{2}.{3}'.format(name, datetime.datetime.now().strftime("%y%m%d%H%M%S"), p_version, ext)
    logger.info('Return result: {0}'.format(name))
    return name


def version_up(file='name_with_multi_underscore_hash_001.tst'):
    """
    one version up ,from sbrys file string

    :param
        file:
            filename that already was generated by sbrys:
    :return new filename string:

    toDo find more elegant function
    """
    full_name, ext = (os.path.splitext(file))
    name, data = split_at(full_name, '_', -2)
    hash, version = data.split('_')
    version_up = '{:03d}'.format(int(version)+1)
    new_name = '{0}_{1}_{2}{3}'.format(name, hash, version_up, ext)
    logger.info('Return result: {0}'.format(new_name))
    return new_name



def copy_tmp_to_collection():
    """

    :return:
    """
    pass




def create_db_entry():
    """

    :return:
    """
    pass



def data_from_user(name='', hash='', description_short='', description_long='',img='',
                        tags=[],context='',software='',sotware_v='',versions=1,files=[]):


    """
    create Json based Sidecar File

    :return:
    """
    feedback = ''
    scf = {}
    if len(name)>4:
        scf['name'] = name
    else:
        feedback = 'Please take a more descriptive name'

    if hash:
        scf['hash'] = hash

    if len(description_short) > 10:
        scf['description_short'] = description_short
        


def save_file():
    """
    save File to folder create sidecar File and create DB entry
    :return:

    """
    pass




if __name__ == '__main__':
    print create_dir_dict()
    # import tempfile
    # temp_file = tempfile.NamedTemporaryFile(suffix='.tst')
    # print temp_file.name
    # print create_name(tmp_file='/test.tst')#temp_file.name
    # print add_version()